---
title: Reproduction
---

## Set up

```{r}
# Clear environment
rm(list=ls())

# Start timer
start.time <- Sys.time()

# Disable scientific notation
options(scipen=999)

# Import required libraries (if not otherwise import in model.R)
library(ggplot2)
library(data.table)
library(ggpubr)
library(tidyr, include.only = c("pivot_wider"))

# Get the model and helper functiosn (but hide loading warnings for each package)
suppressMessages(source("model.R"))
source("helpers.R")
```

```{r}
# Set the seed
SEED = 200

# Set default dimensions for figures
DEFAULT_WIDTH = 7
DEFAULT_HEIGHT = 4

# Set file paths to save results

folder = "../outputs"

path_baseline_f2 <- file.path(folder, "fig2_baseline.csv.gz")
path_exclusive_f2 <- file.path(folder, "fig2_exclusive.csv.gz")
path_twoangio_f2 <- file.path(folder, "fig2_twoangio.csv.gz")

path_baseline_f3 <- file.path(folder, "fig3_baseline.csv.gz")
path_exclusive_f3 <- file.path(folder, "fig3_exclusive.csv.gz")
path_twoangio_f3 <- file.path(folder, "fig3_twoangio.csv.gz")
path_baseline_f3_seed500 <- file.path(folder, "fig3_baseline_seed500.csv.gz")
path_baseline_f3_seed700 <- file.path(folder, "fig3_baseline_seed700.csv.gz")
path_twoangio_f3_seed500 <- file.path(folder, "fig3_twoangio_seed500.csv.gz")
path_twoangio_f3_seed700 <- file.path(folder, "fig3_twoangio_seed700.csv.gz")

path_baseline_f5 <- file.path(folder, "fig5_baseline.csv.gz")
path_exclusive_f5 <- file.path(folder, "fig5_exclusive.csv.gz")
path_twoangio_f5 <- file.path(folder, "fig5_twoangio.csv.gz")

path_double_sup <- file.path(folder, "sup_baseline_double.csv.gz")
path_triple_sup <- file.path(folder, "sup_baseline_triple.csv.gz")

path_txt2 <- file.path(folder, "txt2.csv")
path_txt3 <- file.path(folder, "txt3.csv")
path_txt3_seeds <- file.path(folder, "txt3_seeds.csv")
path_fig2 <- file.path(folder, "fig2.png")
path_fig2a_seeds <- file.path(folder, "fig2a_seeds.png")
path_fig3 <- file.path(folder, "fig3.png")
path_fig4 <- file.path(folder, "fig4.png")
path_fig5 <- file.path(folder, "fig5.png")
path_supfig <- file.path(folder, "supplementary_figure.png")
```

## Run models

Run model scenarios.

```{r}
if (isTRUE(run)) {
  # Run model
  baseline <- run_model(seed = SEED)
  baseline_6pm <- run_model(shifts = c(8,18), seed = SEED)
  baseline_7pm <- run_model(shifts = c(8,19), seed = SEED)

  exclusive <- run_model(exclusive_use = TRUE, seed = SEED)
  exclusive_6pm <- run_model(shifts = c(8,18), exclusive_use = TRUE, seed = SEED)
  exclusive_7pm <- run_model(shifts = c(8,19), exclusive_use = TRUE, seed = SEED)

  twoangio <- run_model(angio_inr = 2, angio_ir=0, seed = SEED)
  twoangio_6pm <- run_model(shifts = c(8,18), angio_inr = 2, angio_ir=0, seed = SEED)
  twoangio_7pm <- run_model(shifts = c(8,19), angio_inr = 2, angio_ir=0, seed = SEED)
}
```
```{r}
# (in seperate cell to above as otherwise seemed to crash)
if (isTRUE(run)) {
  # Save results for Figure 2
  data.table::fwrite(baseline, path_baseline_f2)
  data.table::fwrite(exclusive, path_exclusive_f2)
  data.table::fwrite(twoangio, path_twoangio_f2)

  # Process and save results for Figure 3
  process_f3_data(baseline, baseline_6pm, baseline_7pm, path_baseline_f3)
  process_f3_data(exclusive, exclusive_6pm, exclusive_7pm, path_exclusive_f3)
  process_f3_data(twoangio, twoangio_6pm, twoangio_7pm, path_twoangio_f3)
}
```

Re-run models but return different output from standard hours for use in Figure 5

```{r}
if (isTRUE(run)) {
  baseline_f5 <- run_model(seed = SEED, fig5=TRUE)
  exclusive_f5 <- run_model(exclusive_use = TRUE, seed = SEED, fig5=TRUE)
  twoangio_f5 <- run_model(angio_inr = 2, angio_ir=0, seed = SEED, fig5=TRUE)
}
```
```{r}
if (isTRUE(run)) {
  data.table::fwrite(baseline_f5, path_baseline_f5)
  data.table::fwrite(exclusive_f5, path_exclusive_f5)
  data.table::fwrite(twoangio_f5, path_twoangio_f5)
}
```

Run baseline with double and triple the number of ECR patients, for the supplementary figure.

```{r}
if (isTRUE(run)) {
  baseline_sup2 <- run_model(seed = SEED, ecr_pt = 58*2)
  baseline_sup3 <- run_model(seed = SEED, ecr_pt = 58*3)
}
```
```{r}
if (isTRUE(run)) {
  data.table::fwrite(baseline_sup2, path_double_sup)
  data.table::fwrite(baseline_sup3, path_triple_sup)
}
```

Run baseline and double angioINR with varying hours and seeds.

```{r}
if (isTRUE(run)) {
  # Baseline with varying hours and seed 500
  s500_baseline <- run_model(seed = 500)
  s500_baseline_6pm <- run_model(shifts = c(8,18), seed = 500)
  s500_baseline_7pm <- run_model(shifts = c(8,19), seed = 500)

  # Baseline with varying hours and seed 700
  s700_baseline <- run_model(seed = 700)
  s700_baseline_6pm <- run_model(shifts = c(8,18), seed = 700)
  s700_baseline_7pm <- run_model(shifts = c(8,19), seed = 700)

  # Double AngioINR with varying hours and seed 500
  s500_twoangio <- run_model(angio_inr = 2, angio_ir=0, seed = 500)
  s500_twoangio_6pm <- run_model(shifts = c(8,18), angio_inr = 2, angio_ir=0, seed = 500)
  s500_twoangio_7pm <- run_model(shifts = c(8,19), angio_inr = 2, angio_ir=0, seed = 500)

  # Double AngioINR with varying hours and seed 700
  s700_twoangio <- run_model(angio_inr = 2, angio_ir=0, seed = 700)
  s700_twoangio_6pm <- run_model(shifts = c(8,18), angio_inr = 2, angio_ir=0, seed = 700)
  s700_twoangio_7pm <- run_model(shifts = c(8,19), angio_inr = 2, angio_ir=0, seed = 700)
}
```
```{r}
# Save results (in seperate cell to above as otherwise seemed to crash)
if (isTRUE(run)) {
  process_f3_data(s500_baseline, s500_baseline_6pm, s500_baseline_7pm,
                  path_baseline_f3_seed500)
  process_f3_data(s700_baseline, s700_baseline_6pm, s700_baseline_7pm,
                  path_baseline_f3_seed700)
  process_f3_data(s500_twoangio, s500_twoangio_6pm, s500_twoangio_7pm,
                  path_twoangio_f3_seed500)
  process_f3_data(s700_twoangio, s700_twoangio_6pm, s700_twoangio_7pm,
                  path_twoangio_f3_seed700)
}
```

Run baseline with several different seeds

```{r baseline_seeds}
baseline_seeds <- function(seed, run, folder) {
  #' Run baseline model with different seeds
  #' 
  #' @param seed integer, starting seed for replications
  #' @param run boolean, whether to run model
  #' @param folder string, folder to store results in
  if (isTRUE(run)) {
    seed_baseline <- run_model(seed = seed)
    seed_path <- file.path(folder, paste(
      "fig2_baseline_seed", seed, ".csv.gz", sep=""))
    data.table::fwrite(seed_baseline, seed_path)
  }
}

baseline_seeds(0, run, folder)
baseline_seeds(50, run, folder)
baseline_seeds(100, run, folder)
baseline_seeds(150, run, folder)
baseline_seeds(450, run, folder)
baseline_seeds(700, run, folder)
baseline_seeds(750, run, folder)
```

## Import results

Import the results, adding a column to each to indicate the scenario.

```{r import}
base_f2 <- import_results(path_baseline_f2,
                          "Baseline")
exc_f2 <- import_results(path_exclusive_f2,
                         "Exclusive use")
two_f2 <- import_results(path_twoangio_f2,
                         "Two AngioINRs")

base_f3 <- import_results(path_baseline_f3,
                          "Baseline")
exc_f3 <- import_results(path_exclusive_f3,
                         "Exclusive use")
two_f3 <- import_results(path_twoangio_f3,
                         "Two AngioINRs")

base_f3_s500  <- import_results(path_baseline_f3_seed500,
                                "Baseline (seed 500)")
base_f3_s700  <- import_results(path_baseline_f3_seed700,
                                "Baseline (seed 700)")
two_f3_s500 <- import_results(path_twoangio_f3_seed500,
                              "Two AngioINRs (seed 500)")
two_f3_s700  <- import_results(path_twoangio_f3_seed700,
                               "Two AngioINRs (seed 700)")

base_f5 <- data.table::fread(path_baseline_f5)
exc_f5 <- data.table::fread(path_exclusive_f5)
two_f5 <- data.table::fread(path_twoangio_f5)

base_sup_double <- import_results(path_double_sup, "Baseline (double)")
base_sup_triple <- import_results(path_triple_sup, "Baseline (triple)")
```

## In-text results

In-text results 1 and 2

```{r in_text_1_and_2}
txt2 <- dplyr::bind_rows(base_f2, exc_f2, two_f2) %>%
  filter(resource=="angio_inr") %>%
  group_by(scenario) %>%
  summarize(mean = mean(wait_time)) %>%
  mutate(diff_from_baseline = round(mean - mean[1], 2))

# Save and display result
data.table::fwrite(txt2, path_txt2)
txt2
```

In-text result 3

```{r in_text_3}
txt3 <- dplyr::bind_rows(base_f3, exc_f3, two_f3) %>%
  filter(resource=="angio_inr") %>%
  group_by(scenario, shift) %>%
  summarize(mean = mean(wait_time)) %>%
  mutate(diff_from_5pm = round(mean - mean[1], 2))

# Save and display result
data.table::fwrite(txt3, path_txt3)
txt3
```

### Demonstrate variation between model runs

We can see the importance of seed control here. For example, with seed 700, we see a broader range of results, with the result for 6pm (13.32) is much higher than for the other two seeds and, compared with their 5pm results, we would've seen less of a reduction. Similarly, if we compared the 5pm seed 700 result with the 6pm seed 500 result, we would see a much greater reduction.

The same applies to the prior scenarios for Figure 2. I've held the seeds still between them, so the only change is the scenario.

However, as we are not sure, it is also reasonable to assume that a seed might have been used for the paper, but just not mentioned in the article or included in the code.

```{r variation}
# Dataframes to analyse
var_list <- c(list(base_f3, base_f3_s500, base_f3_s700),
              list(two_f3, two_f3_s500, two_f3_s700))

# For loop through those two lists
df_seeds_list <- list()
i <- 0
for (l in var_list) {
  i <- i + 1

  # Process results
  df_seeds <- dplyr::bind_rows(l) %>%
    filter(resource=="angio_inr") %>%
    group_by(scenario, shift) %>%
    summarize(mean = round(mean(wait_time),2)) %>%
    ungroup()
  
  # Convert to wide format and display
  df_seeds_list[[i]] <- pivot_wider(df_seeds, id_cols="scenario",
                                    values_from=c("mean"), names_from="shift")
}

# Combine into single dataframe, save and display
combined_seeds <- dplyr::bind_rows(df_seeds_list)
data.table::fwrite(combined_seeds, path_txt3_seeds)
combined_seeds
```

## Figure 2

```{r fig2}
# Create sub-plots
p1 <- create_plot(base_f2,
                  group="resource",
                  title="Baseline",
                  ylab="Standardised density of patient in queue")
p2 <- create_plot(exc_f2,
                  group="resource",
                  title="Exclusive-use",
                  xlab="Patient wait time (min)",
                  xlim=c(0, 250))
p3 <- create_plot(two_f2,
                  group="resource",
                  title="Double angio INRs")

# Arrange in a single figure
ggarrange(p1, p2, p3, nrow=1,
          common.legend=TRUE, legend="bottom",
          labels=c("A", "B", "C"))
ggsave(path_fig2, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT)
```

### Demonstrate that geom_density scaled is scaling against density of 0 wait time

```{r fig2_scaling}
# Create figure as usual
p <- create_plot(base_f2,
                 group="resource",
                 title="Baseline",
                 ylab="Standardised density of patient in queue")

# Get data from the plot
plot_data <- ggplot_build(p)$data[[1]]

# Create dataframe with the densities for when the waitimes are 0
no_wait <- plot_data %>% filter(x==0) %>% select(colour, density, scaled)

# Loop through each of the colours (which reflect the resource groups)
for (c in no_wait$colour) {
  # Filter the plot data to that resource group, then divide the densities by
  # the density from wait time 0
  d <- plot_data %>%
    filter(colour == c) %>%
    mutate(scaled2 = density / no_wait[no_wait$colour==c, "density"]) %>%
    ungroup() %>%
    select(scaled, scaled2)

  # Find the number of rows where these values match the scaled values
  n_match <- sum(apply(d, 1, function(x) length(unique(x)) == 1))
  n_total <- nrow(d)
  print(sprintf("%s out of %s results match", n_match, n_total))
}
```

### Figure 2 (baseline only) with various different seeds

This imports the files too (as several files)

```{r figa2a_seeds}
plot_list <- list()
i <- 0
seeds <- c(0, 50, 100, 150, 450, 700, 750)
for (s in seeds) {
  i <- i + 1
  seed_path <- file.path(folder, paste(
      "fig2_baseline_seed", s, ".csv.gz", sep=""))
  seed_baseline <- import_results(seed_path, "Baseline")
  plot_list[[i]] <- create_plot(seed_baseline, group="resource", title=s)
}
```

```{r fig2a_seeds_arrange}
ggarrange(plotlist=plot_list, common.legend=TRUE, legend="bottom")
ggsave(path_fig2a_seeds, width=13, height=20)
```

## Figure 3

```{r fig3}
# Create sub-plots
p1 <- create_plot(base_f3,
                  group="shift",
                  title="Baseline",
                  ylab="Standardised density of patient in queue")
p2 <- create_plot(exc_f3,
                  group="shift",
                  title="Exclusive-use",
                  xlab="Patient wait time (min)",
                  xlim=c(0, 300),
                  breaks_width=100)
p3 <- create_plot(two_f3,
                  group="shift",
                  title="Double angio INRs",
                  xlim=c(0, 250))

# Arrange in a single figure
ggarrange(p1, p2, p3, nrow=1,
          common.legend=TRUE, legend="bottom",
          labels=c("A", "B", "C"))
ggsave(path_fig3, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT)
```

## Figure 4

```{r fig4}
# Get the relevant results from in-text results 1, 2 and 3
# Then calculate difference from baseline
fig4 <- dplyr::bind_rows(txt2 %>% select(scenario, mean),
                         txt3 %>%
                          filter(scenario=="Exclusive use", shift=="6pm") %>%
                          mutate(scenario="Exclusive use (+1h)") %>%
                          select(scenario, mean)) %>%
  mutate(diff = mean - mean[1]) %>%
  filter(scenario!="Baseline") %>%
  mutate(dis_free_gain = abs(diff)*4.2)

# Set order of the bars, and give full labels
fig4_col <- c("Exclusive use", "Two AngioINRs", "Exclusive use (+1h)")
fig4_col_l <- c("Exclusive-use", "Two angio INRs", "Exclusive-use and +1hr work")
fig4$scenario <- factor(fig4$scenario, levels=fig4_col)
fig4$scenario_lab <- plyr::mapvalues(fig4$scenario, from=fig4_col, to=fig4_col_l)

ggplot(fig4, aes(x=scenario_lab, y=dis_free_gain)) +
  geom_bar(stat="identity") +
  ylim(0, 32) +
  xlab("Scenarios") +
  ylab("Mean disability-free life added (days)")
ggsave(path_fig4, width=5, height=3)
```

## Figure 5

Currently depends on simmer.plot() function that doesn't work on the imported results from the csv file, so need to allow to run model to produce this plot.

```{r fig5}
if (isTRUE(run)) {
  baseline_f5 <- run_model(seed = SEED, fig5=TRUE)
  exclusive_f5 <- run_model(exclusive_use = TRUE, seed = SEED, fig5=TRUE)
  twoangio_f5 <- run_model(angio_inr = 2, angio_ir=0, seed = SEED, fig5=TRUE)
  
  # Replace resource (which has been filtered to angioINR) with scenario
  baseline_f5$resource <- "Baseline"
  exclusive_f5$resource <-"Exclusive-use"
  twoangio_f5$resource <- "Two angio INRs"
  
  # Combine into single object
  fig5_df <- dplyr::bind_rows(baseline_f5, exclusive_f5, twoangio_f5)
  
  # Create figure using simmer's plot
  p <- plot(fig5_df, metric="utilization") +
    xlab("Scenarios") +
    ylab("Utilisation") +
    scale_y_continuous(labels = scales::percent, limits=c(0, 0.4)) +
    ggtitle("") +
    geom_text(aes(label=round(.data$Q50*100)), vjust=-1)
  p
  
  # Save to provided path
  ggsave(path_fig5, width=5, height=2.5)
}
```

## Supplementary figure

```{r supplementary_figure}
# Create sub-plots
p1 <- create_plot(base_f2,
                  group="resource",
                  title="Baseline",
                  ylab="Standardised density of patient in queue")
p2 <- create_plot(base_sup_double,
                  group="resource",
                  title="Doubling ECR patients",
                  xlab="Patient wait time (min)",
                  xlim=c(0, 300),
                  breaks_width=100)
p3 <- create_plot(base_sup_triple,
                  group="resource",
                  title="Tripling ECR patients",
                  xlim=c(0, 300))

# Arrange in a single figure
ggarrange(p1, p2, p3, nrow=1,
          common.legend=TRUE, legend="bottom",
          labels=c("A", "B", "C"))
ggsave(path_supfig, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT)
```

## Time elapsed

```{r timer}
if (isTRUE(run)) {
  end.time <- Sys.time()
  elapsed.time <- round((end.time - start.time), 3)
  elapsed.time
}
```
