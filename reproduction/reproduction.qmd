---
title: Reproduction
execute: 
  enabled: false
---

## Set up

```{r}
# Clear environment
rm(list=ls())

# Start timer
start.time <- Sys.time()

# Disable scientific notation
options(scipen=999)

# Import required libraries (if not otherwise import in model.R)
library(ggplot2)
library(data.table)
library(ggpubr)

# Get the model function (but hide loading warnings for each package)
suppressMessages(source("model.R"))
```

```{r}
# Set file paths to save results
path_baseline = "outputs/fig2_baseline.csv.gz"
path_exclusive = "outputs/fig2_exclusive.csv.gz"
path_twoangio = "outputs/fig2_twoangio.csv.gz"
path_fig2a = "outputs/fig2a.png"
```

This function was created to reduce code duplication, with the baseline model parameters as inputs...
  
```{r}
run_model <- function(angio_inr = 1,
                      ir = 2,
                      angio_staff = 6,
                      ed_pt = 107700,
                      inr_pt = 104,
                      eir_pt= 468,
                      ir_pt = 3805,
                      run_t = 365,
                      nsim = 30,
                      exclusive_use = FALSE,
                      seed = 42) {
  #' Run model and get results
  #' 
  #' @param angio_inr number of AngioINR machines
  #' @param ir number of interventional radiologists on day shift
  #' @param angio_staff number of angiography staff on day shift
  #' @param ed_pt number of ED patients
  #' @param inr_pt number of elective INR patients
  #' @param eir_pt number of emergency IR patients
  #' @param ir_pt number of elective IR patients
  #' @param run_t simulation runtime in days
  #' @param nsim number of replications
  #' @param exclusive_use whether angioINR has exclusive use (i.e. no elective
  #' IR patients allowed to use the machine)
  #' @param seed integer that provides seed to be incremented on in each
  #' replication (e.g. run 1 is seed+=1, run 2 is seed+=2)

  # Run the model
  list_containing_output <- simulate_nav(
    angio_inr = angio_inr,
    ir = ir,
    angio_staff = angio_staff,
    ed_pt = ed_pt,
    inr_pt = inr_pt,
    eir_pt = eir_pt,
    ir_pt = ir_pt,
    run_t = run_t,
    nsim = nsim,
    exclusive_use = exclusive_use,
    seed = seed
  )
  # Get arrivals (not interested in resources - list_containing_output[[2]]))
  # Filter to the relevant results (ED + resource and wait_time)
  arrivals <- data.frame(list_containing_output[[1]]) %>%
    filter(category == "ed") %>%
    select(resource, wait_time)

  # Return list with two dataframes
  return(arrivals)
}
```

## Run model

Run through each of the scenarios and save results to compressed CSV files.

```{r}
# baseline <- run_model(seed = 500)
```

```{r}
# exclusive <- run_model(exclusive_use = TRUE, seed = 500)
```

```{r}
# twoangio <- run_model(angio_inr = 2, seed = 500)
```

```{r}
# data.table::fwrite(baseline, path_baseline)
# data.table::fwrite(exclusive, path_exclusive)
# data.table::fwrite(twoangio, path_twoangio)
```

## Import results

```{r}
res_base <- data.table::fread(path_baseline)
res_exc <- data.table::fread(path_exclusive)
res_two <- data.table::fread(path_twoangio)
```

## In-text results 1 and 2

```{r}
# Loop through the dataframes and present the mean wait time for each resource
# (across all replications)
df_list <- list(res_base, res_exc, res_two)
for (i in 1:length(df_list)) {
  print(df_list[[i]] %>%
    group_by(resource) %>%
    summarize("mean" = mean(wait_time),
              "median" = median(wait_time)))
}
```

## Figure 2

```{r}
create_plot <- function(df, title, xlab="", ylab="", xlim=c(0, 200)) {
  #' Create sub-plots for Figure 2A
  #' 
  #' @param df Dataframe with wait times across replications
  #' @param title String to use as title for plot
  #' @param xlim Tuple with limits for x axis
  
  # Set negative wait times to 0
  df$wait_time[df$wait_time < 0] <- 0
  
  # Create the plot, scaling the density estimate to a maximum of 1
  ggplot(df, aes(x = wait_time,
                 colour = resource,
                 y = after_stat(scaled))) +
    geom_density() +
    # Apply square transformation to each axis, removing x points beyond limits
    scale_y_continuous(transform = "sqrt") +
    scale_x_continuous(transform = "sqrt",
                       breaks = scales::breaks_width(50),
                       limits = xlim,
                       oob = scales::censor,
                       guide = guide_axis(angle=45)) +
    # Titles and styling
    ggtitle(title) +
    xlab(xlab) +
    ylab(ylab) +
    theme_minimal(base_size=10) +
    theme(plot.title = element_text(hjust = 0.5),
          axis.text.x = element_text(colour="black"),
          axis.text.y = element_text(colour="black"),
          legend.title=element_blank()) +
    guides(colour = guide_legend(nrow = 1))
}

# Create sub-plots
p1 <- create_plot(res_base,
                  title="Baseline",
                  ylab="Standardised density of patient in queue")
p2 <- create_plot(res_exc,
                  title="Exclusive-use",
                  xlab="Patient wait time (min)",
                  xlim=c(0, 250))
p3 <- create_plot(res_two,
                  title="Double angio INRs")

# Arrange in a single figure
ggarrange(p1, p2, p3, nrow=1,
          common.legend=TRUE, legend="bottom",
          labels=c("A", "B", "C"))
ggsave(path_fig2a)
```

## Time elapsed

```{r}
#end.time <- Sys.time()
#elapsed.time <- round((end.time - start.time), 3)
#elapsed.time
```
