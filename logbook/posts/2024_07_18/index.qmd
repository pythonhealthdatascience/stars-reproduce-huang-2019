---
title: "Day 11"
author: "Amy Heather"
date: "2024-07-18"
categories: [compendium]
bibliography: ../../../quarto_site/references.bib
---

::: {.callout-note}

Finishing up with research compendium stage

:::

## Untimed: Research compendium

### Tests

Having re-ran all the scenarios from scratch, I replaced the files in `tests/testthat/expected_results/` and then ran `testthat::test_dir("tests/testthat")`.

`is_true(compare)` returned error `Error in `is_true(compare)`: unused argument (compare)` so switched back to `expect_equal()`.

However, these were then all successful! Included instructions to run these tests, run time, and what you might expect to see, to the reproduction `README`.

### Docker

#### Troubleshooting errors when attempting to build the image

Ran `sudo docker build --tag huang2019 . -f ./docker/Dockerfile` from `reproduction/` (which is where the `renv` is located). Hit an error:

```
15.45 Warning: failed to find source for 'Matrix 1.7-0' in package repositories
15.45 Warning: error downloading 'https://cloud.r-project.org/src/contrib/Archive/Matrix/Matrix_1.7-0.tar.gz' [cannot open URL 'https://cloud.r-project.org/src/contrib/Archive/Matrix/Matrix_1.7-0.tar.gz']
15.45 Error: failed to retrieve package 'Matrix@1.7-0'

...

ERROR: failed to solve: process "/bin/sh -c R -e \"renv::restore()\"" did not complete successfully: exit code: 1
```

I looked to the address, and found that 1.7-0 was indeed not in the Archive, but it is the latest version of the package. It is available at <https://cran.r-project.org/src/contrib/Matrix_1.7-0.tar.gz> or at <https://cloud.r-project.org/src/contrib/Matrix_1.7-0.tar.gz>. This was only the second package it tried to install - the first was MASS 7.3-60.2, and that wasn't the latest version. Looking at other packages, it seems common that the latest version is not on CRAN archive.

I tried out a bunch of things, but the same issue persisted throughout:

* I [found a post](https://github.com/rstudio/renv/issues/209) with the same issue - that renv() only looks in CRAN archive in a Docker image. They suggested `renv::restore(repos = c(CRAN = "https://cloud.r-project.org"))`.
  * I changed the Dockerfie (but used single quotes for URL) and re-ran - `RUN R -e "renv::restore(repos = c(CRAN = 'https://cloud.r-project.org'))"`
  * I tried with double quotes as above, but including `\` to escape the inner quotes - `RUN R -e "renv::restore(repos = c(CRAN = \"https://cloud.r-project.org\"))"`
* Based on some online posts, I wondered if this might be to do with system dependencies. Based on [this post](https://mdneuzerling.com/post/determining-system-dependencies-for-r-projects/), I opened a fresh R session (so not in renv) and tried to install `getsysreqs` although it was not available for my version of R. The RStudio Package Manager (RSPM) was recommended. I also stumbled across `containerit` which can make a Dockerfile for you and would include the system dependencies. However, I decided first to try the simplest option, which is to just install a fairly standard list of some linux libraries that R packages need, [like here](http://haines-lab.com/post/2022-01-23-automating-computational-reproducibility-with-r-using-renv-docker-and-github-actions/).
* Based on [this issue](https://github.com/rstudio/renv/issues/1767), I add `ENV RENV_WATCHDOG_ENABLED FALSE` to disable the renv watchdog.

Based on [Tom's Dockerfile](https://github.com/TomMonks/reproducible_r_docker/blob/main/Dockerfile) which is from Peter Solymos, I tried changing the CRAN source `RUN R -e "renv::restore(repos = c(CRAN = \"https://packagemanager.rstudio.com/all/__linux__/focal/latest\"))"`. This resolved the issue, as it was able to download Matrix from CRAN. **All packages successfully downloaded**, but I then hit an issue **installing** the packages:

```
ERROR: this R is version 4.1.1, package 'MASS' requires R >= 4.4.0
install of package 'MASS' failed [error code 1]`.
```

I then realised I had accidentally put R 4.1.1, when I meant to put R 4.4.1! I changed this and re-ran. This was successful until attempting to install `igraph`, at which it hit an error:

```
Error in dyn.load(file, DLLpath = DLLpath, ...) : 
  unable to load shared object '/home/code/renv/staging/2/igraph/libs/igraph.so':
  libglpk.so.40: cannot open shared object file: No such file or directory
```

I add `libglpk-dev` to the list of system dependencies to install then tried again. It did eventually failed again with another similar issue. 

```
Error in dyn.load(file, DLLpath = DLLpath, ...) : 
  unable to load shared object '/home/code/renv/staging/2/stringi/libs/stringi.so':
  libicui18n.so.66: cannot open shared object file: No such file or directory
```

I briefly tried adding `containerit` to my `renv` to try that and see if it was simpler, although decided to pause on that and remove it and keep trying as before, as I kept getting errors and it wasn't a quick-fix. I removed it from `DESCRIPTION` then ran `renv::clean()`, `renv::snapshot()`.

I add `libicu-dev` and tried again. This failed with the same error as before.

Looking at the [rocker rstudio image](https://hub.docker.com/layers/rocker/rstudio/4.4/images/sha256-853bc686c132b6f07ec024142612d7d01ea4d2a0716fe269d36adf4d4487c19c?context=explore), it runs on `ubunutu 22.04`. [Posit](https://docs.posit.co/connect/admin/r/dependencies/) lists system dependencies for ubunutu 22.04 as `apt install -y libcairo2-dev libssl-dev make libcurl4-openssl-dev libmysqlclient-dev unixodbc-dev libnode-dev default-jdk libxml2-dev git libfontconfig1-dev libfreetype6-dev libssh2-1-dev zlib1g-dev libglpk-dev libjpeg-dev imagemagick libmagick++-dev gsfonts cmake libpng-dev libtiff-dev python3 libglu1-mesa-dev libgl1-mesa-dev libgdal-dev gdal-bin libgeos-dev libproj-dev libsqlite3-dev libsodium-dev libicu-dev tcl tk tk-dev tk-table libfribidi-dev libharfbuzz-dev libudunits2-dev`. I replaced the line in my Dockerfile and tried again. This failed with the same error as before (so returned it to the simpler list).

I found [this issue](https://github.com/Bioconductor/bioconductor_docker/issues/59) with the same error, where it appears there is an issue with the stringi binary being built for the wrong Ubunutu since `libicui18n.so.66` is for 20.04, although the fix appeared to be that they fixed the bioconductor container, and it wasn't super clear to me what I should do.

Based on [this example](https://gist.github.com/aforsythe/b588c950965d5a6b4810bed4cf85873b) linked from [this issue](https://forum.posit.co/t/restore-renv-lock-file-without-redownloading-packages/102690/9), I tried switching `libicu-dev` to `libicu`. However, this returned error `Unable to locate package libicu`. I then instead tried adding `RUN R -e "install.packages('stringi')"` before `renv::restore()`. That ran successfully, but hit a new error:

```
Error in dyn.load(file, DLLpath = DLLpath, ...) : 
  unable to load shared object '/home/code/renv/staging/2/openssl/libs/openssl.so':
  libssl.so.1.1: cannot open shared object file: No such file or directory
```

`libssl` is in the list of system dependencies that were being installed. A quick google shows there are issues related to `libssl.so.1.1` on `Ubuntu 22.04`. I tried doing the simplest solution first - installing it seperately (as that worked for `stringi` above).

The docker image then built successfully!

#### Testing the image

Having successfully built the image (`sudo docker build --tag huang2019 . -f ./docker/Dockerfile`), I then tried creating a container. After some trial and error with the command (and using `sudo docker rm huang2019_docker` to remove and recreate container)), I got to:

`(sleep 2 && xdg-open http://localhost:8888) & sudo docker run -rm -it -p 8888:8787 -e DISABLE_AUTH=true --name  huang2019_docker huang2019` (with `rm` to auto-remove when exit with `Ctrl+C`, and `it` to run in interactive mode).

This opened up RStudio - although there were no files and none of the libraries I had added were listed in the packages (e.g. no simmer). I searched for suggestions on this issue, but struggled to find anything.

### Fix Quarto GitHub action

Returned to the broken Quarto render action (which fails to find `rmarkdown` despite it having been installed with `setup-renv`). Some ideas:

* [Example GitHub action](https://github.com/pommevilla/quarto-action-tests/blob/main/.github/workflows/quarto-render.yml) for book with Python and R - although a few years old
* [Example GitHub action](https://github.com/nrennie/wbs-summer-school-2024-data-viz/blob/main/.github/workflows/publish.yml) where they installed packages directly
* [RStudio tutorial](https://rstudio.github.io/renv/articles/ci.html#using-the-github-actions-cache-with-renv) for custom GitHub action workflow
